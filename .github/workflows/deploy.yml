name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CI-specific dependencies
          pip install -r requirements-ci.txt

      - name: Lint code
        run: |
          # Run flake8 with relaxed settings
          pip install flake8
          flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          pytest tests/ -v

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install CI-specific dependencies
          pip install -r requirements-ci.txt

      - name: Check model file
        run: |
          # Check if model file exists
          if [ ! -f "models/baseline_xgb.pkl" ]; then
            echo "Error: Model file not found at models/baseline_xgb.pkl"
            ls -la models/
            exit 1
          fi
          echo "Model file found at models/baseline_xgb.pkl"

      - name: Save model to BentoML
        run: |
          # Add error handling
          set -e
          echo "Saving model to BentoML..."
          python src/serving/save_model.py --model-path models/baseline_xgb.pkl --model-name baseline_xgb
          echo "Model saved successfully."

      - name: Build BentoML service
        run: |
          # Add error handling
          set -e
          echo "Building BentoML service..."
          cd src/serving
          bentoml build --verbose
          echo "BentoML service built successfully."

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          bentoml containerize baseline_xgb_service:latest --tag ${{ secrets.DOCKER_USERNAME }}/baseline_xgb_service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/baseline_xgb_service:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f infra/k8s/deployment.yaml
          kubectl rollout restart deployment/baseline-service
